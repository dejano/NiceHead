/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package rs.ac.uns.ftn.xws.ws.mpcb;

import java.math.BigDecimal;
import java.util.logging.Logger;

import javax.ejb.Stateless;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

import rs.ac.uns.ftn.xws.dao.BanksDataDao;
import rs.ac.uns.ftn.xws.generated.MpExceptionEnum;
import rs.ac.uns.ftn.xws.util.CentralBankUtil;
import rs.ac.uns.ftn.xws.util.ObjectFactory;

/**
 * This class was generated by Apache CXF 2.6.5 2015-05-19T15:57:34.844+02:00
 * Generated source version: 2.6.5
 * 
 */

@Stateless
@javax.jws.WebService(serviceName = "MpcbDocumentService", portName = "MpcbDocumentPort", targetNamespace = "http://www.ftn.uns.ac.rs/xws/ws/mpcb", wsdlLocation = "file:/C:/Users/nikola42/Documents/Fakultet/XWS/projekat/NiceHead/CentralnaBanka/WEB-INF/wsdl/mpcb.wsdl", endpointInterface = "rs.ac.uns.ftn.xws.ws.mpcb.MpcbDocument")
public class MpcbDocumentImpl implements MpcbDocument {

	private static final Logger LOG = Logger.getLogger(MpcbDocumentImpl.class
			.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * rs.ac.uns.ftn.xws.ws.mpcb.MpcbDocument#rtgsRequest(rs.ac.uns.ftn.xws.
	 * generated.Mt102 rtgsRequestPart )*
	 */
	public rs.ac.uns.ftn.xws.generated.Mt900 rtgsRequest(
			rs.ac.uns.ftn.xws.generated.Mt102 rtgsRequestPart)
			throws MpException {
		LOG.info("Executing operation rtgsRequest");
		System.out.println(rtgsRequestPart);
		try {
			rs.ac.uns.ftn.xws.generated.Mt900 _return = new rs.ac.uns.ftn.xws.generated.Mt900();
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new MpException("mpException...");
	}

	public rs.ac.uns.ftn.xws.generated.Mt900 clearingRequest(
			rs.ac.uns.ftn.xws.generated.Mt103 clearingRequestPart)
			throws MpException {
		BigDecimal debtorBankBalance;
		BigDecimal creditorBankBalance;
		BigDecimal amount = clearingRequestPart.getAmount();

		BanksDataDao bdd = new BanksDataDao();

		String debtorBankSwiftCode = clearingRequestPart.getDebtorBankDetails()
				.getSwiftCode();
		String creditorBankSwiftCode = clearingRequestPart
				.getCreditorBankDetails().getSwiftCode();

		// validate swift codes
		if (!CentralBankUtil.isSwiftCodeValid(debtorBankSwiftCode)) {
			throw new MpException("Debtor swift code invalid.",
					MpExceptionEnum.INVALID_SWIFT_CODE);
		}

		if (!CentralBankUtil.isSwiftCodeValid(creditorBankSwiftCode)) {
			throw new MpException("Creditor swift code invalid.",
					MpExceptionEnum.INVALID_SWIFT_CODE);
		}

		// update debtor balance
		debtorBankBalance = bdd.getBankBalance(debtorBankSwiftCode);
		bdd.updateBankBalance(debtorBankSwiftCode,
				debtorBankBalance.subtract(amount));

		// update creditor balance
		creditorBankBalance = bdd.getBankBalance(creditorBankSwiftCode);
		bdd.updateBankBalance(creditorBankSwiftCode,
				creditorBankBalance.add(amount));

		return ObjectFactory.getMt900(clearingRequestPart);
	}

}
